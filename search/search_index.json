{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#bambu-printer-manager","title":"bambu-printer-manager","text":"<p><code>bambu-printer-manager</code> is an all in one pure python wrapper for interacting with and managing Bambu Lab printers.  </p>"},{"location":"#become-a-sponsor","title":"Become a Sponsor","text":"<p>While caffiene and sleepness nights drive the delivery of this project, they unfortunately do not cover the financial expense necessary to further its development.  Please consider becoming a <code>bambu-printer-manager</code> sponsor today!</p>"},{"location":"#project-composition","title":"Project Composition","text":"Text Only<pre><code>bpm/  \n    bambucommands.py            # collection of constants mainly representing Bambu Lab `mqtt` request commands \n    bambuconfig.py              # contains the `BambuConfig` class used for storing configuration data\n    bambulogger.py              # internal class used for logging\n    bambuprinterlogger.json     # internal configuration file for configuration of logging\n    bambuprinter.py             # the main `bambu-printer-manager` class `BambuPrinter` lives here\n    bambuspool.py               # contains the `BambuSpool` class used for storing spool data\n    bambutools.py               # contains a collection of methods used as tools (mostly internal)\n\n    ftpsclient/\n        _client.py              # internal class used for performing `FTPS` operations\n</code></pre>"},{"location":"#dependencies","title":"Dependencies","text":"Text Only<pre><code>Python 3.12.1+\n\n* mkdocstrings, webcolors and paho-mqtt install automatically as predefined dependencies\n</code></pre>"},{"location":"#installation","title":"Installation","text":"Text Only<pre><code>pip install bambu-printer-manager\n</code></pre>"},{"location":"#imports","title":"Imports","text":"Python<pre><code>from bpm.bambuconfig import BambuConfig\nfrom bpm.bambuprinter import BambuPrinter\nfrom bpm.bambutools import PrinterState\nfrom bpm.bambutools import parseStage\nfrom bpm.bambutools import parseFan\n</code></pre>"},{"location":"#constructors","title":"Constructor(s)","text":"<p>Python<pre><code>config = BambuConfig(hostname=\"{host name}\", access_code=\"{access code}\", serial_number=\"{serial #}\")\nprinter = BambuPrinter(config=config)\n</code></pre> or variations such as: Python<pre><code>config = BambuConfig()\nprinter = BambuPrinter()\n\nconfig.hostname = \"{host name}\"\nconfig.access_code = \"{access code}\"\nconfig.serial_number = \"{serial #}\"\n\nprinter.config = config\n</code></pre> or Python<pre><code>config = BambuConfig()\n\nconfig.hostname = \"{host name}\"\nconfig.access_code = \"{access code}\"\nconfig.serial_number = \"{serial #}\"\n\nprinter = BambuPrinter(config=config)\n</code></pre> or even Python<pre><code>printer = BambuPrinter(config=BambuConfig(hostname=\"{host name}\", access_code=\"{access code}\", serial_number=\"{serial #}\"))\n</code></pre></p>"},{"location":"#usage-patterns","title":"Usage Patterns","text":"<p>You can either poll <code>BambuPrinter</code> periodically for data updates or rely on a callback when  new data becomes available.  The preferred pattern should be callback based, however both  of these approaches will work fine.  </p> <p>Please consider the examples provided here as mere starting points.  </p>"},{"location":"#data-polling-example","title":"Data Polling Example","text":"Python<pre><code>import time\nimport sys\nimport os\n\nfrom bpm.bambuconfig import BambuConfig\nfrom bpm.bambuprinter import BambuPrinter\nfrom bpm.bambutools import PrinterState\n\nhostname = os.getenv('BAMBU_HOSTNAME')\naccess_code = os.getenv('BAMBU_ACCESS_CODE')\nserial_number = os.getenv('BAMBU_SERIAL_NUMBER')\n\nif not hostname or not access_code or not serial_number:\n    print()\n    print(\"BAMBU_HOSTNAME, BAMBU_ACCESS_CODE, and BAMBU_SERIAL_NUMBER environment variables must be set\")\n    print()\n    sys.exit(1)\n\nconfig = BambuConfig(hostname=hostname, access_code=access_code, serial_number=serial_number)\nprinter = BambuPrinter(config=config)\n\nprinter.start_session()\n\nwhile printer.state != PrinterState.CONNECTED:\n    print(\"waiting for bpm to connect to printer\", flush=True)\n    if printer.internalException:\n        print(f\"retrying connection - reason: {printer.internalException if not printer.internalException is None else \"no internal exception\"}\")\n        printer.start_session()\n    time.sleep(1)\n\nprint(\"\\r\\nrefreshing sdcard 3mf files\", flush=True)\nprinter.get_sdcard_3mf_files()\nprint(\"sdcard 3mf files refreshed\\r\\n\", flush=True)\n\nprint(\"bpm is ready for business\\r\\n\")\n\nwhile True:\n    print(f\"tool=[{round(printer.tool_temp, 1)}/{round(printer.tool_temp_target, 1)}] \" +\n          f\"bed=[{round(printer.bed_temp, 1)}/{round(printer.bed_temp_target, 1)}] \" + \n          f\"fan=[{parseFan(printer.fan_speed)}] print=[{printer.gcode_state}] speed=[{printer.speed_level}] \" +\n          f\"light=[{'on' if printer.light_state else 'off'}]\")\n\n    print(f\"stg_cur=[{parseStage(printer.current_stage)}] file=[{printer.gcode_file}] \" +\n          f\"layers=[{printer.layer_count}] layer=[{printer.current_layer}] \" +\n          f\"%=[{printer.percent_complete}] eta=[{printer.time_remaining} min] \" +\n          f\"spool=[{printer.active_spool} ({printer.spool_state})]\")\n\n    time.sleep(1)\n\n@app.route('/api/printer')\ndef get_printer_info():\n    global printer\n    # checking both the spools tuple and recent_update \n    # states ensure we have a healthy data stream\n    if printer.recent_update and printer.spools:\n        return printer.toJson()\n    else:\n        return {\"status\": \"warn\", \"reason\": \"no data to send\"}\n</code></pre>"},{"location":"#callback-pattern","title":"Callback Pattern","text":"Python<pre><code>import sys\nimport os\n\nfrom bpm.bambuconfig import BambuConfig\nfrom bpm.bambuprinter import BambuPrinter\n\nhostname = os.getenv('BAMBU_HOSTNAME')\naccess_code = os.getenv('BAMBU_ACCESS_CODE')\nserial_number = os.getenv('BAMBU_SERIAL_NUMBER')\n\nif not hostname or not access_code or not serial_number:\n    print()\n    print(\"BAMBU_HOSTNAME, BAMBU_ACCESS_CODE, and BAMBU_SERIAL_NUMBER environment variables must be set\")\n    print()\n    sys.exit(1)\n\nconfig = BambuConfig(hostname=hostname, access_code=access_code, serial_number=serial_number)\nprinter = BambuPrinter(config=config)\n\ndef on_update(printer):\n    print(f\"tool=[{round(printer.tool_temp, 1)}/{round(printer.tool_temp_target, 1)}] \" +\n          f\"bed=[{round(printer.bed_temp, 1)}/{round(printer.bed_temp_target, 1)}] \" + \n          f\"fan=[{parseFan(printer.fan_speed)}] print=[{printer.gcode_state}] speed=[{printer.speed_level}] \" +\n          f\"light=[{'on' if printer.light_state else 'off'}]\")\n\n    print(f\"stg_cur=[{parseStage(printer.current_stage)}] file=[{printer.gcode_file}] \" +\n          f\"layers=[{printer.layer_count}] layer=[{printer.current_layer}] \" +\n          f\"%=[{printer.percent_complete}] eta=[{printer.time_remaining} min] \" +\n          f\"spool=[{printer.active_spool} ({printer.spool_state})]\")\n\nprinter.on_update = on_update\nprinter.start_session()\n\n# go do other stuff\n</code></pre>"},{"location":"#cli-w-callback","title":"CLI w/ Callback","text":"Python<pre><code>import json\nimport traceback\nimport time\nimport sys\nimport os\n\nfrom console.utils import wait_key\n\nfrom bpm.bambuconfig import BambuConfig\nfrom bpm.bambuprinter import BambuPrinter\nfrom bpm.bambutools import PrinterState\nfrom bpm.bambutools import parseStage\nfrom bpm.bambutools import parseFan\n\ngcodeState = \"\"\nfirmware = \"N/A\"\nams_firmware = \"N/A\"\n\ndef on_update(printer):\n    global firmware, ams_firmware, gcodeState\n\n    if gcodeState != printer.gcode_state:\n        gcodeState = printer.gcode_state\n\n    if firmware != printer.config.firmware_version:\n        firmware = printer.config.firmware_version\n        print(f\"\\r\\nprinter firmware: [{firmware}] serial #: [{printer.config.serial_number}]\\r\")\n    if ams_firmware != printer.config.ams_firmware_version: \n        ams_firmware = printer.config.ams_firmware_version\n        print(f\"ams firmware: [{ams_firmware}]\\r\")\n\n    print(f\"\\r\\ntool=[{round(printer.tool_temp * 1.0, 1)}/{round(printer.tool_temp_target * 1.0, 1)}] \" +\n         f\"bed=[{round(printer.bed_temp * 1.0, 1)}/{round(printer.bed_temp_target * 1.0, 1)}] \" + \n         f\"fan=[{parseFan(printer.fan_speed)}] print=[{printer.gcode_state}] speed=[{printer.speed_level}] \" +\n         f\"light=[{'on' if printer.light_state else 'off'}]\")\n\n    print(f\"\\rstg_cur=[{parseStage(printer.current_stage)}] file=[{printer.gcode_file}] \" +\n          f\"layers=[{printer.layer_count}] layer=[{printer.current_layer}] \" +\n          f\"%=[{printer.percent_complete}] eta=[{printer.time_remaining} min] \" +\n          f\"spool=[{printer.active_spool} ({printer.spool_state})]\\r\")\n\nprint(\"\\r\")                    \n\nhostname = os.getenv('BAMBU_HOSTNAME')\naccess_code = os.getenv('BAMBU_ACCESS_CODE')\nserial_number = os.getenv('BAMBU_SERIAL_NUMBER')\n\nif not hostname or not access_code or not serial_number:\n    print()\n    print(\"BAMBU_HOSTNAME, BAMBU_ACCESS_CODE, and BAMBU_SERIAL_NUMBER environment variables must be set\")\n    print()\n    sys.exit(1)\n\nconfig = BambuConfig(hostname=hostname, access_code=access_code, serial_number=serial_number)\nprinter = BambuPrinter(config=config)\n\nprinter.on_update = on_update\nprinter.start_session()\n\ndef confirm(request):\n    printer.pause_session()\n    resp = input(f\"Confirm [{request}] (y/n): \")\n    printer.resume_session()\n    return resp == \"y\" or resp == \"Y\"\n\nspecial = False\n\nwhile True: \n    key = wait_key()\n    if key == \"\\x1b\": \n        special = True\n        continue\n    if special:\n        if key == \"[\": continue\n        if key == \"C\":  # right arrow\n            # client.publish(\"device/{}/request\".format(SERIAL), json.dumps(MOVE_RIGHT))\n            print(\"\\rmove right\\r\")\n        if key == \"D\":  # left arrow\n            # client.publish(\"device/{}/request\".format(SERIAL), json.dumps(MOVE_LEFT))\n            print(\"\\rmove left\\r\")\n        special = False\n        continue\n\n    if not special and key == \"\\r\":\n        print(\"\\r\")\n\n    if key == \"?\":\n        print(\"\\r\\nCommands:\\r\\n\")\n        print(\"   ? = this list\\r\")\n        print(\"   b = bed target temperature\\r\")\n        print(\"   d = dump printer json object\\r\")\n        print(\"   g = send gcode command\\r\")\n        print(\"   f = fan speed (in percent)\\r\")\n        print(\"   l = toggle light\\r\")\n        print(\"   p = print 3MF file\\r\")\n        print(\"   q = quit\\r\")\n        print(\"   Q = restart without exiting\")\n        print(\"   r = request full data refresh\\r\")\n        print(\"   s = change filament / spool\\r\")\n        print(\"   S = change speed (1 to 4)\\r\")\n        print(\"   t = tool target temperature\\r\")\n        print(\"   u = unload filament / spool\\r\")\n        print(\"   v = toggle verbose reporting\\r\")\n        print(\"   w = wifi signal strength\\r\")\n        print(\"   ! = abort job\\r\")\n        print(\"   ~ = toggle subscription\\n\\r\")\n\n    if key == \"d\":\n        print(json.dumps(printer, default=printer.jsonSerializer, indent=4, sort_keys=True).replace(\"\\n\", \"\\r\\n\"))\n\n    if key == \"w\":\n        print(f\"\\r\\nwifi signal strength: [{printer.wifi_signal}]\")\n\n    if key == \"v\":\n        printer.config.verbose = not printer.config.verbose\n\n    if key == \"q\": \n        break\n\n    if key == \"Q\":\n        printer.quit()\n        printer.start_session()\n\n    if key == \"l\":\n        printer.light_state = not printer.light_state\n\n    if key == \"t\":\n        printer.pause_session()\n        temp = input(\"\\r\\nTool0 Target Temperature: \")\n        printer.resume_session()\n        if temp.isnumeric() and confirm(\"CHANGE_TOOL_TEMP\"):\n            printer.tool_temp_target = temp\n\n    if key == \"b\":\n        printer.pause_session()\n        temp = input(\"\\r\\nBed Target Temperature: \")\n        printer.resume_session()\n        if temp.isnumeric():\n            printer.bed_temp_target = temp\n\n    if key == \"f\":\n        printer.pause_session()\n        speed = input(\"\\r\\nFan Speed (%): \")\n        printer.resume_session()\n        if speed.isnumeric():\n            printer.fan_speed = speed\n\n    if key == \"r\":\n        printer.refresh()\n\n    if key == \"u\" and confirm(\"UNLOAD_FILAMENT\"):\n        printer.unload_filament()\n\n    if key == \"s\":\n        printer.pause_session()\n        slot = input(\"\\r\\nTarget Slot: \")\n        printer.resume_session()\n        if len(slot) &gt; 0:\n            printer.load_filament(slot)\n\n    if key == \"g\":\n        printer.pause_session()\n        gcode = input(\"\\r\\nGcode: \")\n        printer.resume_session()\n        if len(gcode) &gt; 0:\n            printer.send_gcode(gcode)\n\n    if key == \"p\":\n        printer.pause_session()\n        name = input(\"\\r\\n3MF filename to print: \")\n        if len(name) &gt; 0:\n            bed = input(\"\\rBed type (1=High Temp Plate, 2=Textured PEI Plate): \")\n            if len(bed) &gt; 0 and bed.isnumeric():\n                ams = \"[{}]\".format(input(\"\\rAMS mapping ([-1/0], [-1/1], [-1/2], [-1/3]): \"))\n                if len(ams) &gt; 0:\n                    printer.resume_session()\n                    printer.print_3mf_file(name, bed, ams)\n                    continue\n        printer.resume_session()\n\n    if key == \"S\":\n        printer.pause_session()\n        speed = input(\"\\r\\nNew speed (1=silent 2=standard 3=sport 4=ludicrous): \")\n        printer.resume_session()\n        if len(speed) &gt; 0 and speed in (\"1\", \"2\", \"3\", \"4\"):\n            printer.speed_level = speed\n\n    if key == \"!\" and confirm(\"STOP\"):\n        printer.stop_printing()\n\n    if key == \"~\":\n        if printer.state == PrinterState.PAUSED:\n            printer.resume_session()\n            print(\"\\rsession resumed\\r\")\n        else:\n            printer.pause_session()\n            print(\"\\rsession paused\\r\")\n\nprinter.quit()\n</code></pre>"},{"location":"container/","title":"bambu-printer-manager Client Container","text":"<p>This container is a Material UI / React application for monitoring and administering Bambu Lab printers.  It runs on an <code>Alpine Linux</code> image with <code>HAPROXY</code> working as a reverse proxy for the frontend, backend, and webcam services.</p> <p>The frontend is written in <code>nodejs</code> and uses the <code>React Material UI</code> library for producing a content rich user experience.  The backend is written in <code>Python</code> and uses a <code>Flask Waitress</code> server for responding to frontend api calls with the help of a custom python library developed specifically for interacting with <code>Bambu Lab</code> printers. The webcam service is a custom python daemon that decodes the printer's built-in webcam data and produces a <code>MJPEG</code> stream that  is served by the frontend.</p>"},{"location":"container/#become-a-sponsor","title":"Become a Sponsor","text":"<p>While caffiene and sleepness nights drive the delivery of this project, they unfortunately do not cover the financial expense necessary to further its development.  Please consider becoming a <code>bambu-printer-manager</code> sponsor today!</p>"},{"location":"container/#installation","title":"Installation","text":"Text Only<pre><code># Configure the host, access code, serial # environment variables and \n# map the HAPROXY listener to a host port to launch the container\n\ndocker run \\\n       -e BAMBU_HOSTNAME='PRINTER_HOSTNAME_OR_IP' \\\n       -e BAMBU_ACCESS_CODE='PRINTER_ACCESS_CODE' \\\n       -e BAMBU_SERIAL_NUMBER='PRINTER_SERIAL_NUMBER' \\\n       -p 80:8080 \\\n       --name bambu-printer-manager synman/bambu-printer-manager\n</code></pre>"},{"location":"container/#usage","title":"Usage","text":"<p>To use <code>bambu-printer-manager</code> you only need to pull the image, configure a couple environment variables, and map the <code>HAPROXY</code> listener (port 8080) to a usable port on the host machine.  You then access it like you would any other web based application.</p> <p> </p> <p> </p>"},{"location":"container/#external-chamber-heating","title":"External Chamber Heating","text":"<p>This is an <code>advanced</code> feature of the container that allows you to use a heater to control the atmosphere within your printer's enclosure. This is very helpful if you have an A1 in an enclosure and want to use  exotic filaments such as ABS, ASA, Polycarbonite, and Nylon.</p> <p>You connect the heater to a Wi-Fi enabled power plug (tplink / tasmota / esphome / tuya / etc) for power delivery and configure the plug to respond to  power state commands and power state requests over MQTT.  Some plugs, such as tasmota and esphome flashed one can do this directly while others will likely require something like Home Assistant.</p> <p>You also need a Wi-Fi enabled temperature sensor that can do similar as the Wi-Fi power plug to publish environmental data, specifically the temperature,  to an MQTT topic.  The easiest way to do this is to build one yourself.  However, I'm sure there are a number of pre-assembled ones you could use too.</p> <p>The final step is configuring the <code>bambu-printer-manager</code> container to interact with the temperature sensor and power plug: Docker<pre><code>ENV INTEGRATED_EXTERNAL_HEATER=\"TRUE\"\n\nENV CHAMBER_MQTT_HOST=\"MQTT_SERVER_HOST_OR_IP\"\nENV CHAMBER_MQTT_PORT=\"1883\"\nENV CHAMBER_MQTT_USER=\"MQTT_USER_NAME\"\nENV CHAMBER_MQTT_PASS=\"MQTT_PASSWORD\"\nENV CHAMBER_TARGET_TOPIC=\"bambu-printer-manager/chamber_target\"\nENV CHAMBER_TEMPERATURE_TOPIC=\"CHAMBER_TEMPERATURE_TOPIC\"\nENV CHAMBER_REQUESTED_STATE_TOPIC=\"HEATER_REQUESTED_STATE_TOPIC\"\nENV CHAMBER_CURRENT_STATE_TOPIC=\"HEATER_CURRENT_STATE_TOPIC\"\nENV CHAMBER_STATE_ON_VALUE=\"on\"\nENV CHAMBER_STATE_OFF_VALUE=\"off\"\n</code></pre> Once everything is configured properly, you will be able to monitor your chamber's temperature and set a target temperature for it the same  way you monitor temperature and set target values for the tool (extruder), the bed, and, the part cooling fan.</p> <p> </p>"},{"location":"container/#troubleshooting","title":"Troubleshooting","text":"<p>If you are geting a <code>port is already in use</code> type error, it is likely because you are trying to run the container using the host's  network.  It is recommended that you run the <code>bambu-printer-manager</code> container on a bridged network.  Behind the \"public\" port exposed by HAPROXY (<code>8080</code>), it also requires exclusive access to ports <code>3000</code> (nodejs react frontend), <code>5000</code> (flask waitress backend), and  <code>8090</code> (webcamd).  Some hosts, such as Synology DSM use ports like <code>5000</code> and this will cause problems.</p> <p>Verify your printer's information.  You must know its routable IP Address, access code, and serial #. You can find each of these on  your printer's display.  These must match your Docker container's applicable environment variable values. Docker<pre><code>ENV BAMBU_HOSTNAME=\"PRINTER_HOST_OR_IP\"\nENV BAMBU_ACCESS_CODE=\"PRINTER_ACCESS_CODE\"\nENV BAMBU_SERIAL_NUMBER=\"PRINTER_SERIAL_NUMBER\"\n</code></pre> So long as the backend api (api/api.py) is running, there a number of useful http endpoints you can call to assist with troubleshooting.</p> <ul> <li> <p><code>http://{container_host_ip}:{container_host_port}/api/health_check</code> - This service route dumps the entire <code>BambuPrinter</code> attribute  structure as a <code>json</code> document and adds a general success / failure node at the bottom.</p> </li> <li> <p><code>http://{container_host_ip}:{container_host_port}/api/toggle_verbosity</code> - This service route toggles the underlying log level of all components between <code>WARNING</code> and <code>DEBUG</code>.  </p> </li> <li> <p><code>http://{container_host_ip}:{container_host_port}/api/trigger_printer_refresh</code> - This service route requests the printer send full status and version  reports.</p> </li> <li> <p><code>http://{container_host_ip}:{container_host_port}/api/dump_log</code> - This service route serves the entire contents of the application log.</p> </li> <li> <p><code>http://{container_host_ip}:{container_host_port}/api/truncate_log</code> - This service route deletes the current application log.  A restart may be  required for logging to resume.</p> </li> <li> <p><code>http://{container_host_ip}:{container_host_port}/api/toggle_session</code> - This service route pauses or resumes the <code>BambuPrinter</code> session.  This may be  helpful on machines such as the <code>A1</code> where only one client can be connected at a time.</p> </li> </ul> <p>If you encounter an issue you need help with, feel free to open a ticket at GitHub.</p>"},{"location":"license/","title":"License","text":"Text Only<pre><code>            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n                    Version 2, December 2004\n\n Copyright (C) 2004 Sam Hocevar &lt;sam@hocevar.net&gt;\n\n Everyone is permitted to copy and distribute verbatim or modified\n copies of this license document, and changing it is allowed as long\n as the name is changed.\n\n            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. You just DO WHAT THE FUCK YOU WANT TO.\n</code></pre>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>bpm<ul> <li>bambucommands</li> <li>bambuconfig</li> <li>bambulogger</li> <li>bambuprinter</li> <li>bambuspool</li> <li>bambutools</li> <li>ftpsclient<ul> <li>ftpsclient</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/bpm/bambucommands/","title":"bambucommands","text":"<p><code>bambucommands</code> contains all the internal command structures that are used by <code>BambuPrinter</code> to interact  with your printer.  They are not documented but can be found here.</p>"},{"location":"reference/bpm/bambuconfig/","title":"bambuconfig","text":""},{"location":"reference/bpm/bambuconfig/#bpm.bambuconfig.BambuConfig","title":"<code>BambuConfig</code>","text":"<p>This is the main configuration class for <code>BambuPrinter</code> and is how it knows where to connect to a printer, what access code, and serial # to use.  <code>BambuConfig</code> can also be used to change the log level of  <code>bambu-printer-manager</code>'s logging engine.</p>"},{"location":"reference/bpm/bambuconfig/#bpm.bambuconfig.BambuConfig.__init__","title":"<code>__init__(hostname=None, access_code=None, serial_number=None, mqtt_port=8883, mqtt_client_id='studio_client_id:0c1f', mqtt_username='bblp', watchdog_timeout=30, external_chamber=False, verbose=False)</code>","text":"<p>Sets up all internal storage attributes for <code>BambuConfig</code>.</p>"},{"location":"reference/bpm/bambuconfig/#bpm.bambuconfig.BambuConfig.__init__--parameters","title":"Parameters","text":"<ul> <li>hostname : Optional[str] = None</li> <li>access_code : Optional[str] = None </li> <li>serial_number : Optional[str] = None</li> <li>mqtt_port : Optional[int] = 8883</li> <li>mqtt_client_id : Optional[str] = \"studio_client_id:0c1f\"</li> <li>mqtt_username : Optional[str] = \"bblp\"</li> <li>watchdog_timeout : Optional[int] = 30</li> <li>external_chamber : Optional[bool] = False</li> <li>verbose : Optional[bool] = False</li> </ul> <p><code>external_chamber</code> can be used to tell <code>BambuPrinter</code> not to use any of the chamber  temperature data received from the printer.  This can be useful if you are using an external chamber temperature sensor / heater and want to inject the sensor value and target temperatures into <code>BambuPrinter</code> directly.</p> <p><code>verbose</code> triggers a global log level change (within the scope of <code>bambu-printer-manager</code>) based on its value.  <code>True</code> will set a log level of <code>DEBUG</code> and <code>False</code> (the default) will  set the log level to <code>WARNING</code>.</p>"},{"location":"reference/bpm/bambuconfig/#bpm.bambuconfig.BambuConfig.__init__--attributes","title":"Attributes","text":"<ul> <li>All parameters listed above</li> <li>_firmware_version : str - Reported printer firmware version</li> <li>_ams_firmware_version : str - Reported AMS firmware version</li> <li>_printer_model : bambutools.PrinterModel - Model # derived from serial #</li> <li>_auto_recovery : bool - auto recovery from lost steps print option</li> <li>_filament_tangle_detect : bool - detect spool tangles print option</li> <li>_sound_enable : bool - printer speaker print option</li> <li>_auto_switch_filament : bool - AMS auto switch filamement on runout print option</li> <li>_startup_read_option : bool - AMS will automatically read RFID on boot</li> <li>_tray_read_option : bool - AMS will automatically read RFID on tray/spool change</li> <li>_calibrate_remain_flag : bool - AMS will calculate remaining amount of filament in spool (unverified)</li> </ul>"},{"location":"reference/bpm/bambulogger/","title":"bambulogger","text":"<p>This is an internal file used for log file management.  No documentation is provided  but you can view its source here.</p>"},{"location":"reference/bpm/bambuprinter/","title":"bambuprinter","text":""},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter","title":"<code>BambuPrinter</code>","text":"<p><code>BambuPrinter</code> is the main class within <code>bambu-printer-manager</code> for interacting with and managing your Bambu Lab 3d printer. It provides an object oriented abstraction layer  between your project and the <code>mqtt</code> and <code>ftps</code> based mechanisms in place for communicating with your printer.</p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.__init__","title":"<code>__init__(config=BambuConfig())</code>","text":"<p>Sets up all internal storage attributes for <code>BambuPrinter</code> and bootstraps the logging engine.</p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.__init__--parameters","title":"Parameters","text":"<ul> <li>config : Optional[BambuConfig] = BambuConfig()</li> </ul>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.__init__--attributes","title":"Attributes","text":"<ul> <li>_mqtt_client_thread: <code>PRIVATE</code> Thread handle for the mqtt client thread</li> <li>_watchdog_thread: <code>PRIVATE</code> Thread handle for the watchdog thread</li> <li>_internalExcepton: <code>READ ONLY</code> Returns the underlying <code>Exception</code> object if a failure occurred.</li> <li>_lastMessageTime: <code>READ ONLY</code> Epoch timestamp (in seconds) for the last time an update was received from the printer.</li> <li>_recent_update: <code>READ ONLY</code> Indicates that a message from the printer has been recently processed.</li> <li>_config: <code>READ/WRITE</code> <code>bambuconfig.BambuConfig</code> Configuration object associated with this instance.</li> <li>_state: <code>READ/WRITE</code> <code>bambutools.PrinterState</code> enum reports on health / status of the connection to the printer.</li> <li>_client: <code>READ ONLY</code> Provides access to the underlying <code>paho.mqtt.client</code> library.</li> <li>_on_update: <code>READ/WRITE</code> Callback used for pushing updates.  Includes a self reference to <code>BambuPrinter</code> as an argument.</li> <li>_bed_temp: <code>READ ONLY</code> The current printer bed temperature.</li> <li>_bed_temp_target: <code>READ/WRITE</code> The target bed temperature for the printer.</li> <li>_bed_temp_target_time: <code>READ ONLY</code> Epoch timetamp for when target bed temperature was last set.</li> <li>_tool_temp: <code>READ ONLY</code> The current printer tool temperature.</li> <li>_tool_temp_target: <code>READ/WRITE</code> The target tool temperature for the printer.</li> <li>_tool_temp_target_time: <code>READ ONLY</code> Epoch timetamp for when target tool temperature was last set.</li> <li>_chamber_temp <code>READ/WRITE</code> Not currently integrated but can be used as a stub for external chambers.</li> <li>_chamber_temp_target <code>READ/WRITE</code> Not currently integrated but can be used as a stub for external chambers.</li> <li>_chamber_temp_target_time: <code>READ ONLY</code> Epoch timetamp for when target chamber temperature was last set.</li> <li>_fan_gear <code>READ ONLY</code> Combined fan(s) reporting value.  Can be bit shifted for individual speeds.</li> <li>_heat_break_fan_speed <code>READ_ONLY</code> The heatbreak (heater block) fan speed in percent.</li> <li>_fan_speed <code>READ ONLY</code> The parts cooling fan speed in percent.</li> <li>_fan_speed_target <code>READ/WRITE</code> The parts cooling fan target speed in percent.</li> <li>_fan_speed_target_time: <code>READ ONLY</code> Epoch timetamp for when target fan speed was last set.</li> <li>_light_state <code>READ/WRITE</code> Boolean value indicating the state of the work light.</li> <li>_wifi_signal <code>READ ONLY</code> The current Wi-Fi signal strength of the printer.</li> <li>_speed_level <code>READ/WRITE</code> System Print Speed (1=Quiet, 2=Standard, 3=Sport, 4=Ludicrous).</li> <li>_gcode_state <code>READ ONLY</code> State reported for job status (FAILED/RUNNING/PAUSE/IDLE/FINISH).</li> <li>_gcode_file <code>READ ONLY</code> The name of the current or last printed gcode file.</li> <li>_3mf_file <code>READ ONLY</code> The name of the 3mf file currently being printed.</li> <li>_plate_num <code>READ ONLY</code> The selected plate # for the current 3mf file.</li> <li>_subtask_name <code>READ ONLY</code> The name of the active subtask.</li> <li>_print_type <code>READ ONLY</code> Not entirely sure.  Reports \"idle\" when no job is active.</li> <li>_percent_complete <code>READ ONLY</code> Percentage complete for the current active job.</li> <li>_time_remaining <code>READ ONLY</code> The number of estimated minutes remaining for the active job.</li> <li>_start_time <code>READ ONLY</code> The start time of the last (or current) active job in epoch minutes.</li> <li>_elapsed_time <code>READ ONLY</code> The number of elapsed minutes for the last (or current) active job.</li> <li>_layer_count <code>READ ONLY</code> The total number of layers for the current active job.</li> <li>_current_layer <code>READ ONLY</code> The current layer being printed for the current active job.</li> <li>_current_stage <code>READ ONLY</code> Maps to <code>bambutools.parseStage</code>.</li> <li>_current_stage_text <code>READ ONLY</code> Parsed <code>current_stage</code> value.</li> <li>_spools <code>READ ONLY</code> A Tuple of all loaded spools.  Can contain up to 5 <code>BambuSpool</code> objects.</li> <li>_target_spool <code>READ_ONLY</code> The spool # the printer is transitioning to (<code>0-3</code>=AMS, <code>254</code>=External, <code>255</code>=None).</li> <li>_active_spool <code>READ_ONLY</code> The spool # the printer is using right now (<code>0-3</code>=AMS, <code>254</code>=External, <code>255</code>=None).</li> <li>_spool_state <code>READ ONLY</code> Indicates whether the spool is Loaded, Loading, Unloaded, or Unloading.</li> <li>_ams_status <code>READ ONLY</code> Bitwise encoded status of the AMS (not currently used).</li> <li>_ams_exists <code>READ ONLY</code> Boolean value represents the detected presense of an AMS.</li> <li>_ams_rfid_status <code>READ ONLY</code> Bitwise encoded status of the AMS RFID reader (not currently used).</li> <li>_sdcard_contents <code>READ ONLY</code> <code>dict</code> (json) value of all files on the SDCard (requires <code>get_sdcard_contents</code> be called first).</li> <li>_sdcard_3mf_files <code>READ ONLY</code> <code>dict</code> (json) value of all <code>.3mf</code> files on the SDCard (requires <code>get_sdcard_3mf_files</code> be called first).</li> <li>_hms_data <code>READ ONLY</code> <code>dict</code> (json) value of any active hms codes with descriptions attached if they are known codes.</li> <li>_hms_message <code>READ ONLY</code> all hms_data <code>desc</code> fields concatinated into a single string for ease of use.</li> <li>_print_type <code>READ ONLY</code> can be <code>cloud</code> or <code>local</code></li> <li>_skipped_objects <code>READ ONLY</code> array of objects that have been skipped / cancelled</li> </ul> <p>The attributes (where appropriate) are included whenever the class is serialized using its <code>toJson()</code> method.  </p> <p>When accessing the class level attributes, use their associated properties as the  class level attributes are marked private.</p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.delete_sdcard_file","title":"<code>delete_sdcard_file(file)</code>","text":"<p>Delete the specified file on the printer's SDCard and returns an updated dict of all files on the printer</p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.delete_sdcard_file--parameters","title":"Parameters","text":"<ul> <li>file : str - the full path filename to be deleted</li> </ul>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.download_sdcard_file","title":"<code>download_sdcard_file(src, dest)</code>","text":"<p>Downloads a file from the printer </p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.download_sdcard_file--parameters","title":"Parameters","text":"<ul> <li>src : str - the full path filename on the printer to be downloaded to the host</li> <li>dest : str - the full path filename on the host to store the downloaded file</li> </ul>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.get_sdcard_3mf_files","title":"<code>get_sdcard_3mf_files()</code>","text":"<p>Returns a <code>dict</code> (json document) of all <code>.3mf</code> files on the printer's SD card.  The private class level <code>_sdcard_3mf_files</code> attribute is also populated.</p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.get_sdcard_3mf_files--usage","title":"Usage","text":"<p>The return value of this method is very useful for binding to things like a clientside <code>TreeView</code></p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.get_sdcard_contents","title":"<code>get_sdcard_contents()</code>","text":"<p>Returns a <code>dict</code> (json document) of ALL files on the printer's SD card.  The private class level <code>_sdcard_contents</code> attribute is also populated.</p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.get_sdcard_contents--usage","title":"Usage","text":"<p>The return value of this method is very useful for binding to things like a clientside <code>TreeView</code></p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.jsonSerializer","title":"<code>jsonSerializer(obj)</code>","text":"<p>Helper method used by <code>toJson()</code> to serialize this object.</p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.load_filament","title":"<code>load_filament(slot)</code>","text":"<p>Requests the printer to load filament into the extruder using the requested spool (slot #)</p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.load_filament--parameters","title":"Parameters","text":"<p>slot : int</p> <ul> <li><code>0</code> - AMS Spool #1</li> <li><code>1</code> - AMS Spool #2</li> <li><code>2</code> - AMS Spool #3</li> <li><code>3</code> - AMS Spool #4</li> <li><code>254</code> - External Spool</li> </ul>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.make_sdcard_directory","title":"<code>make_sdcard_directory(dir)</code>","text":"<p>Creates the specified directory on the printer and returns an updated dict of all files on the printer</p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.make_sdcard_directory--parameters","title":"Parameters","text":"<ul> <li>dir : str - the full path directory name to be created</li> </ul>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.pause_printing","title":"<code>pause_printing()</code>","text":"<p>Pauses the current print job if one is running.</p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.pause_session","title":"<code>pause_session()</code>","text":"<p>Pauses the <code>BambuPrinter</code> session is it is active.  Under the covers this method unsubscribes from the <code>/report</code> topic, essentially disabling all printer data refreshes.</p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.print_3mf_file","title":"<code>print_3mf_file(name, plate, bed, use_ams, ams_mapping='', bedlevel=True, flow=True, timelapse=False)</code>","text":"<p>Submits a request to execute the <code>name</code> 3mf file on the printer's SDCard. </p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.print_3mf_file--parameters","title":"Parameters","text":"<ul> <li>name : str                         - path, filename, and extension to execute</li> <li>plate : int                        - the plate # from your slicer to use (usually 1)</li> <li>bed : PlateType                    - the bambutools.PlateType to use</li> <li>use_ams : bool                     - Use the AMS for this print</li> <li>ams_mapping : Optional[str]        - an <code>AMS Mapping</code> that specifies which AMS spools to use (external spool is used if blank)</li> <li>bedlevel : Optional[bool] = True   - boolean value indicates whether or not the printer should auto-level the bed</li> <li>flow : Optional[bool] = True       - boolean value indicates if the printer should perform an extrusion flow calibration</li> <li>timelapse : Optional[bool] = False - boolean value indicates if printer should take timelapse photos during the job</li> </ul>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.print_3mf_file--example","title":"Example","text":"<ul> <li><code>print_3mf_file(\"/jobs/my_project.3mf\", 1, PlateType.HOT_PLATE, False, \"\")</code> - Print the my_project.3mf file in the SDCard /jobs directory using the external spool with bed leveling and extrusion flow calibration enabled and timelapse disabled</li> <li><code>print_3mf_file(\"/jobs/my_project.gcode.3mf\", 1, PlateType.HOT_PLATE, True, \"[-1,-1,2,-1]\")</code> - Same as above but use AMS spool #3</li> </ul>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.print_3mf_file--ams-mapping","title":"AMS Mapping","text":"<ul> <li><code>[0,-1,-1,-1]</code> - use AMS spool #1 only</li> <li><code>[-1,1,-1,-1]</code> - use AMS spool #2 only</li> <li><code>[0,-1,-1,3]</code>  - use AMS spools #1 and #4</li> <li><code>[0,1,2,3]</code>    - use all 4 AMS spools</li> </ul>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.quit","title":"<code>quit()</code>","text":"<p>Shuts down all threads.  Your <code>BambuPrinter</code> instance should probably be  considered dead after making this call although you may be able to restart a session with start_session().</p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.refresh","title":"<code>refresh()</code>","text":"<p>Triggers a full data refresh from the printer (if it is connected).  You should use this method sparingly as resorting to it indicates something is not working properly.</p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.rename_sdcard_file","title":"<code>rename_sdcard_file(src, dest)</code>","text":"<p>Renames the specified file on the printer and returns an updated dict of all files on the printer</p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.rename_sdcard_file--parameters","title":"Parameters","text":"<ul> <li>src : str - the full path name to be renamed</li> <li>dest : str - the full path name to be renamed to</li> </ul>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.resume_printing","title":"<code>resume_printing()</code>","text":"<p>Resumes the current print job if one is paused.</p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.resume_session","title":"<code>resume_session()</code>","text":"<p>Resumes a previously paused session by re-subscribing to the /report topic.</p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.sdcard_file_exists","title":"<code>sdcard_file_exists(path)</code>","text":"<p>Checks to see if a file exists on the printer at the <code>path</code> specified</p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.sdcard_file_exists--parameters","title":"Parameters","text":"<ul> <li>path : str - the full path name to check</li> </ul>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.send_ams_control_command","title":"<code>send_ams_control_command(ams_control_cmd)</code>","text":"<p>Send an AMS Control Command - will pause, resume, or reset the AMS.</p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.send_gcode","title":"<code>send_gcode(gcode)</code>","text":"<p>Submit one, or more, gcode commands to the printer.  To submit multiple gcode commands, separate them with a newline (\\n) character.</p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.send_gcode--parameters","title":"Parameters","text":"<p>gcode : str</p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.send_gcode--examples","title":"Examples","text":"<ul> <li><code>send_gcode(\"G91\\nG0 X0\\nG0 X50\")</code> - queues 3 gcode commands on the printer for processing</li> <li><code>send_gcode(\"G28\")</code> - queues 1 gcode command on the printer for processing</li> </ul>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.set_ams_user_setting","title":"<code>set_ams_user_setting(setting, enabled, ams_id=0)</code>","text":"<p>Enable or disable one of the <code>AMSUserSetting</code> options</p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.set_print_option","title":"<code>set_print_option(option, enabled)</code>","text":"<p>Enable or disable one of the <code>PrintOption</code> options</p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.set_spool_details","title":"<code>set_spool_details(tray_id, tray_info_idx, tray_id_name='', tray_type='', tray_color='', nozzle_temp_min=-1, nozzle_temp_max=-1)</code>","text":"<p>Sets spool / tray details such as filament type, color, and nozzle min/max temperature.</p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.set_spool_k_factor","title":"<code>set_spool_k_factor(tray_id, k_value, n_coef=1.399999976158142, nozzle_temp=-1, bed_temp=-1, max_volumetric_speed=-1)</code>","text":"<p>Sets the linear advance k factor for a specific spool / tray</p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.skip_objects","title":"<code>skip_objects(objects)</code>","text":"<p>skip a list of objects extracted from the 3mf's plate_x.json file</p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.skip_objects--parameters","title":"Parameters","text":"<p>objects : list</p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.start_session","title":"<code>start_session()</code>","text":"<p>Initiates a connection to the Bambu Lab printer and provides a stateful session, with built-in recovery in the event <code>BambuPrinter</code>  becomes disconnected from the machine.</p> <p>This method is required to be called before any commands or data  collection / callbacks can take place with the machine.</p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.stop_printing","title":"<code>stop_printing()</code>","text":"<p>Requests the printer to stop printing if a job is currently running.</p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.toJson","title":"<code>toJson()</code>","text":"<p>Returns a <code>dict</code> (json document) representing this object's private class level attributes that are serializable (most are).</p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.unload_filament","title":"<code>unload_filament()</code>","text":"<p>Requests the printer to unload whatever filament / spool may be currently loaded.</p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.upload_sdcard_file","title":"<code>upload_sdcard_file(src, dest)</code>","text":"<p>Uploads the local filesystem file to the printer and returns an updated dict of all files on the printer</p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.upload_sdcard_file--parameters","title":"Parameters","text":"<ul> <li>src : str - the full path filename on the host to be uploaded to the printer</li> <li>dest : str - the full path filename on the printer to upload to</li> </ul>"},{"location":"reference/bpm/bambuspool/","title":"bambuspool","text":""},{"location":"reference/bpm/bambuspool/#bpm.bambuspool.BambuSpool","title":"<code>BambuSpool</code>","text":"<p>This value object is used by <code>BambuPrinter</code> to enumerate \"spools\" connected to the printer. It is used primarily within <code>BambuPrinter</code>'s <code>_spools</code> attribute and is returned as part of a  Tuple when there are spools active on machine.</p>"},{"location":"reference/bpm/bambuspool/#bpm.bambuspool.BambuSpool.__init__","title":"<code>__init__(id, name, type, sub_brands, color, tray_info_idx, k, bed_temp, nozzle_temp_min, nozzle_temp_max)</code>","text":"<p>Sets up all internal storage attributes for <code>BambuSpool</code>.</p>"},{"location":"reference/bpm/bambuspool/#bpm.bambuspool.BambuSpool.__init__--parameters","title":"Parameters","text":"<ul> <li>id : int - Spool id can be <code>0-3</code> for AMS spools or <code>254</code> for the External spool.</li> <li>name : str - The name of the spool, typically only populated if a Bambu Lab RFID tag is recognized by the AMS.</li> <li>type : str - The type of filament in the spool.  Will either be read by the RFID tag or set on the Printer display.</li> <li>sub_brands : str - For Bambu Lab filaments, specifies the specialization of the filament (Matte, Pro, Tough, etc).</li> <li>color : str - Will either be a color hex code or a color name if <code>webcolors</code> is able to recognize the color code.</li> <li>tray_info_idx : str - The underlying index for the selected filament in Bambu Studio.</li> <li>k : float - The K-Factor to use for determining optimial linear advance (flow rate).</li> <li>bed_temp : int - The target bed temperature to use.</li> <li>nozzle_temp_min : int - The minimum usable nozzle temperature to use.</li> <li>nozzle_temp_max : int - The maximum usable nozzle temperature to use.</li> </ul>"},{"location":"reference/bpm/bambutools/","title":"bambutools","text":"<p><code>bambutools' hosts various classes and methods used internally and externally by</code>bambu-printer-manager`.</p>"},{"location":"reference/bpm/bambutools/#bpm.bambutools.AMSControlCommand","title":"<code>AMSControlCommand</code>","text":"<p>             Bases: <code>Enum</code></p> <p>AMS Control Commands enum</p>"},{"location":"reference/bpm/bambutools/#bpm.bambutools.AMSUserSetting","title":"<code>AMSUserSetting</code>","text":"<p>             Bases: <code>Enum</code></p> <p>AMS User Settings enum</p>"},{"location":"reference/bpm/bambutools/#bpm.bambutools.PlateType","title":"<code>PlateType</code>","text":"<p>             Bases: <code>Enum</code></p> <p>Used by <code>BambuPrinter.print_3mf_file</code> to specify which plate should be used when  starting a print job.</p>"},{"location":"reference/bpm/bambutools/#bpm.bambutools.PrintOption","title":"<code>PrintOption</code>","text":"<p>             Bases: <code>Enum</code></p> <p>Print Option enum</p>"},{"location":"reference/bpm/bambutools/#bpm.bambutools.PrinterModel","title":"<code>PrinterModel</code>","text":"<p>             Bases: <code>Enum</code></p> <p>Printer model enum</p>"},{"location":"reference/bpm/bambutools/#bpm.bambutools.PrinterState","title":"<code>PrinterState</code>","text":"<p>             Bases: <code>Enum</code></p> <p>This enum is used by <code>bambu-printer-manager</code> to track the underlying state  of the <code>mqtt</code> connection to the printer.</p>"},{"location":"reference/bpm/bambutools/#bpm.bambutools.PrinterState--states","title":"States","text":"<ul> <li><code>NO_STATE</code> - Startup / initial state indicates no active session.</li> <li><code>CONNECTED</code> - Primary state expected when polling <code>BambuPrinter</code>.</li> <li><code>PAUSED</code> - <code>bambu-printer</code>'s session state is paused.</li> <li><code>QUIT</code> - When this state is triggered, all session based resources and threads are released.</li> </ul>"},{"location":"reference/bpm/bambutools/#bpm.bambutools.getModelBySerial","title":"<code>getModelBySerial(serial)</code>","text":"<p>Returns the Printer model enum based on the provided serial #.</p>"},{"location":"reference/bpm/bambutools/#bpm.bambutools.parseAMSStatus","title":"<code>parseAMSStatus(status)</code>","text":"<p>Can be used to parse <code>ams_status</code></p>"},{"location":"reference/bpm/bambutools/#bpm.bambutools.parseFan","title":"<code>parseFan(fan)</code>","text":"<p>Mainly an internal method used for parsing Fan data</p>"},{"location":"reference/bpm/bambutools/#bpm.bambutools.parseRFIDStatus","title":"<code>parseRFIDStatus(status)</code>","text":"<p>Can be used to parse <code>ams_rfid_status</code></p>"},{"location":"reference/bpm/bambutools/#bpm.bambutools.parseStage","title":"<code>parseStage(stage)</code>","text":"<p>Mainly an internal method used for parsing stage data from the printer.</p>"},{"location":"reference/bpm/ftpsclient/__init__/","title":"ftpsclient","text":""},{"location":"reference/bpm/ftpsclient/ftpsclient/","title":"ftpsclient","text":"<p>Based on: https://github.com/dgonzo27/py-iot-utils</p> <p>MIT License</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p> <p>wrapper for FTPS server interactions</p>"},{"location":"reference/bpm/ftpsclient/ftpsclient/#bpm.ftpsclient.ftpsclient.ImplicitTLS","title":"<code>ImplicitTLS</code>","text":"<p>             Bases: <code>FTP_TLS</code></p> <p>ftplib.FTP_TLS sub-class to support implicit SSL FTPS</p>"},{"location":"reference/bpm/ftpsclient/ftpsclient/#bpm.ftpsclient.ftpsclient.ImplicitTLS.sock","title":"<code>sock</code>  <code>property</code> <code>writable</code>","text":"<p>return socket</p>"},{"location":"reference/bpm/ftpsclient/ftpsclient/#bpm.ftpsclient.ftpsclient.IoTFTPSClient","title":"<code>IoTFTPSClient</code>","text":"<p>iot ftps ftpsclient</p>"},{"location":"reference/bpm/ftpsclient/ftpsclient/#bpm.ftpsclient.ftpsclient.IoTFTPSClient.delete_file","title":"<code>delete_file(path)</code>","text":"<p>delete a file from under a path inside the FTPS server</p>"},{"location":"reference/bpm/ftpsclient/ftpsclient/#bpm.ftpsclient.ftpsclient.IoTFTPSClient.disconnect","title":"<code>disconnect()</code>","text":"<p>disconnect the current session from the ftps server</p>"},{"location":"reference/bpm/ftpsclient/ftpsclient/#bpm.ftpsclient.ftpsclient.IoTFTPSClient.download_file","title":"<code>download_file(source, dest)</code>","text":"<p>download a file to a path on the local filesystem</p>"},{"location":"reference/bpm/ftpsclient/ftpsclient/#bpm.ftpsclient.ftpsclient.IoTFTPSClient.instantiate_ftps_session","title":"<code>instantiate_ftps_session()</code>","text":"<p>init ftps_session based on input params</p>"},{"location":"reference/bpm/ftpsclient/ftpsclient/#bpm.ftpsclient.ftpsclient.IoTFTPSClient.list_files","title":"<code>list_files(path='/')</code>","text":"<p>list files under a path inside the FTPS server</p>"},{"location":"reference/bpm/ftpsclient/ftpsclient/#bpm.ftpsclient.ftpsclient.IoTFTPSClient.list_files_ex","title":"<code>list_files_ex(path)</code>","text":"<p>list files under a path inside the FTPS server</p>"},{"location":"reference/bpm/ftpsclient/ftpsclient/#bpm.ftpsclient.ftpsclient.IoTFTPSClient.move_file","title":"<code>move_file(source, dest)</code>","text":"<p>move a file inside the FTPS server to another path inside the FTPS server</p>"},{"location":"reference/bpm/ftpsclient/ftpsclient/#bpm.ftpsclient.ftpsclient.IoTFTPSClient.upload_file","title":"<code>upload_file(source, dest, callback=None)</code>","text":"<p>upload a file to a path inside the FTPS server</p>"}]}